@{
    Layout = "~/Shared/_Layout.cshtml";
    Page.Title = "All Features";
    Page.Keywords = "refactoring,analyzer,fix,c#,vb,list,complete,vsix,nuget";
    Page.Description = "A complete list of all features found in Refactoring Essentials";
}

<div class="jumbotron">

    <div class="container">
        <h1>
            All Features
        </h1>
    </div>

</div>

<div class="container">

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseCSharpRefactorings"
                       href="#collapseCSharpRefactorings">C# Refactorings<span style="float: right;">103</span></a>
                </h4>
                <div id="collapseCSharpRefactorings" class="panel-collapse collapse">
                    <div class="panel-body">

                        <ul>
                            <li>Adds another accessor (AddAnotherAccessorCodeRefactoringProvider)</li>
                            <li>Add braces (AddBracesCodeRefactoringProvider)</li>
                            <li>'catch' to 'catch (Exception)' (AddCatchExceptionCodeRefactoringProvider)</li>
                            <li>Add an exception description to the xml documentation (AddExceptionDescriptionCodeRefactoringProvider)</li>
                            <li>Add name for argument (AddNameToArgumentCodeRefactoringProvider)</li>
                            <li>Introduce format item (AddNewFormatItemCodeRefactoringProvider)</li>
                            <li>Add null check (AddNullCheckCodeRefactoringProvider)</li>
                            <li>Add one or more optional parameters to an invocation, using their default values (AddOptionalParameterToInvocationCodeRefactoringProvider)</li>
                            <li>Check array index value (CheckArrayIndexValueCodeRefactoringProvider)</li>
                            <li>Check collection index value (CheckCollectionIndexValueCodeRefactoringProvider)</li>
                            <li>Check dictionary key value (CheckDictionaryKeyValueCodeRefactoringProvider)</li>
                            <li>Check if parameter is null (CheckIfParameterIsNullCodeRefactoringProvider)</li>
                            <li>Check StringBuilder index value (CheckStringBuilderIndexValueCodeRefactoringProvider)</li>
                            <li>Check string index value (CheckStringIndexValueCodeRefactoringProvider)</li>
                            <li>Compute constant value (ComputeConstantValueCodeRefactoringProvider)</li>
                            <li>Add a Contract to specify the return value must not be null (ContractEnsuresNotNullReturnCodeRefactoringProvider)</li>
                            <li>Add a Contract to specify the parameter must not be null (ContractRequiresNotNullCodeRefactoringProvider)</li>
                            <li>Convert anonymous method to lambda expression (ConvertAnonymousMethodToLambdaCodeRefactoringProvider)</li>
                            <li>Convert auto-property to computed propertyy (ConvertAutoPropertyToPropertyCodeRefactoringProvider)</li>
                            <li>Replace bitwise flag comparison with call to 'Enum.HasFlag' (ConvertBitwiseFlagComparisonToHasFlagsCodeRefactoringProvider)</li>
                            <li>Convert '??' to '?:' (ConvertCoalescingToConditionalExpressionCodeRefactoringProvider)</li>
                            <li>Convert dec to hex. (ConvertDecToHexCodeRefactoringProvider)</li>
                            <li>Convert do...while to while (ConvertDoWhileToWhileLoopCodeRefactoringProvider)</li>
                            <li>Convert '==' to 'object.Equals()' (ConvertEqualityOperatorToEqualsCodeRefactoringProvider)</li>
                            <li>Convert '==' to 'object.ReferenceEquals()' (ConvertEqualityOperatorToReferenceEqualsCodeRefactoringProvider)</li>
                            <li>Convert 'Equals' call to '==' or '!=' (ConvertEqualsToEqualityOperatorCodeRefactoringProvider)</li>
                            <li>Convert explicit to implict implementation (ConvertExplicitToImplicitImplementationCodeRefactoringProvider)</li>
                            <li>Convert expression body member to statement body (ConvertExpressionBodyToStatementBodyCodeRefactoringProvider)</li>
                            <li>Convert 'foreach' loop to 'for' (ConvertForeachToForCodeRefactoringProvider)</li>
                            <li>Convert 'for' loop to 'while' (ConvertForToWhileCodeRefactoringProvider)</li>
                            <li>Replace 'Enum.HasFlag' call with bitwise flag comparison (ConvertHasFlagsToBitwiseFlagComparisonCodeRefactoringProvider)</li>
                            <li>Convert hex to dec. (ConvertHexToDecCodeRefactoringProvider)</li>
                            <li>Convert 'if' to '?:' (ConvertIfStatementToConditionalTernaryExpressionCodeRefactoringProvider)</li>
                            <li>Convert 'if' to '??' expression (ConvertIfStatementToNullCoalescingExpressionAction)</li>
                            <li>Convert 'if' to 'return' (ConvertIfStatementToReturnStatementAction)</li>
                            <li>Convert 'if' to 'switch' (ConvertIfStatementToSwitchStatementCodeRefactoringProvider)</li>
                            <li>Convert implict to explicit implementation (ConvertImplicitToExplicitImplementationCodeRefactoringProvider)</li>
                            <li>Convert instance to static method (ConvertInstanceToStaticMethodCodeRefactoringProvider)</li>
                            <li>Convert string interpolation to 'string.Format' (ConvertInterpolatedStringToStringFormatCodeRefactoringProvider)</li>
                            <li>Converts expression of lambda body to statement (ConvertLambdaBodyExpressionToStatementCodeRefactoringProvider)</li>
                            <li>Converts statement of lambda body to expression (ConvertLambdaStatementToExpressionCodeRefactoringProvider)</li>
                            <li>Convert lambda to anonymous method (ConvertLambdaToAnonymousMethodCodeRefactoringProvider)</li>
                            <li>Convert method group to anoymous method (ConvertMethodGroupToAnonymousMethodCodeRefactoringProvider)</li>
                            <li>Convert method group to lambda expression (ConvertMethodGroupToLambdaCodeRefactoringProvider)</li>
                            <li>Convert '*'/'/' to '&lt;&lt;'/'&gt;&gt;' (ConvertMultiplyToShiftCodeRefactoringProvider)</li>
                            <li>Convert 'ReferenceEquals' call to '==' or '!=' (ConvertReferenceEqualsToEqualityOperatorCodeRefactoringProvider)</li>
                            <li>Convert '&lt;&lt;'/'&gt;&gt;' to '*'/'/' (ConvertShiftToMultiplyCodeRefactoringProvider)</li>
                            <li>Convert statement body member to expression body (ConvertStatementBodyToExpressionBodyCodeRefactoringProvider)</li>
                            <li>Convert 'string.Format' to string interpolation (ConvertStringFormatToInterpolatedStringCodeRefactoringProvider)</li>
                            <li>Convert 'switch' to 'if' (ConvertSwitchToIfCodeRefactoringProvider)</li>
                            <li>Convert 'return' to 'if' (ConvertTernaryExpressionToIfStatementCodeRefactoringProvider)</li>
                            <li>Convert while loop to do...while (ConvertWhileToDoWhileLoopCodeRefactoringProvider)</li>
                            <li>Copy comments from base (CopyCommentsFromBaseCodeRefactoringProvider)</li>
                            <li>Create changed event for property (CreateChangedEventCodeRefactoringProvider)</li>
                            <li>Create custom event implementation (CreateCustomEventImplementationAction)</li>
                            <li>Create delegate (CreateDelegateAction)</li>
                            <li>Create event invocator (CreateEventInvocatorCodeRefactoringProvider)</li>
                            <li>Create overload without parameter (CreateOverloadWithoutParameterCodeRefactoringProvider)</li>
                            <li>Extract anonymous method (ExtractAnonymousMethodCodeRefactoringProvider)</li>
                            <li>Extract field (ExtractWhileConditionToInternalIfStatementCodeRefactoringProvider)</li>
                            <li>Swap 'Equals' target and argument (FlipEqualsTargetAndArgumentCodeRefactoringProvider)</li>
                            <li>Flip an operator operands (FlipOperatorArgumentsCodeRefactoringProvider)</li>
                            <li>Flip an relational operator operands (FlipRelationalOperatorArgumentsCodeRefactoringProvider)</li>
                            <li>Generate switch labels (GenerateSwitchLabelsCodeRefactoringProvider)</li>
                            <li>Import static class with using directive in file (ImportStaticClassWithUsingCodeRefactoringProvider)</li>
                            <li>Initialize auto property from constructor parameter (InitializeAutoPropertyFromConstructorParameterCodeRefactoringProvider)</li>
                            <li>Initialize field from constructor parameter (InitializeFieldFromConstructorParameterCodeRefactoringProvider)</li>
                            <li>Insert anonymous method signature (InsertAnonymousMethodSignatureCodeRefactoringProvider)</li>
                            <li>Invert conditional operator (InvertConditionalOperatorCodeRefactoringProvider)</li>
                            <li>Invert if (InvertIfCodeRefactoringProvider)</li>
                            <li>Invert logical expression (InvertLogicalExpressionCodeRefactoringProvider)</li>
                            <li>Invoke as static method (InvokeAsStaticMethodCodeRefactoringProvider)</li>
                            <li>Iterate via 'foreach' (IterateViaForeachAction)</li>
                            <li>Join local variable declaration and assignment (JoinLocalVariableDeclarationAndAssignmentCodeRefactoringProvider)</li>
                            <li>Join string literal (JoinStringCodeRefactoringProvider)</li>
                            <li>Merge nested 'if' (MergeNestedIfAction)</li>
                            <li>Negate 'is' expression (NegateIsExpressionCodeRefactoringProvider)</li>
                            <li>Negate a relational expression (NegateLogicalExpressionCodeRefactoringProvider)</li>
                            <li>put inside 'using' (PutInsideUsingAction)</li>
                            <li>Remove braces (RemoveBracesCodeRefactoringProvider)</li>
                            <li>'catch (Exception)' to 'catch' (RemoveCatchExceptionCodeRefactoringProvider)</li>
                            <li>Remove #region/#endregion directives (RemoveRegionEndRegionDirectivesCodeRefactoringProvider)</li>
                            <li>Replace assignment with postfix expression (ReplaceAssignmentWithPostfixExpressionCodeRefactoringProvider)</li>
                            <li>Replace auto-property with property that uses a backing field (ReplaceAutoPropertyWithPropertyAndBackingFieldCodeRefactoringProvider)</li>
                            <li>Convert cast to 'as'. (ReplaceDirectCastWithSafeCastCodeRefactoringProvider)</li>
                            <li>Replace type with 'var' (ReplaceExplicitTypeWithVarCodeRefactoringProvider)</li>
                            <li>Replace operator assignment with assignment (ReplaceOperatorAssignmentWithAssignmentCodeRefactoringProvider)</li>
                            <li>Replace postfix expression with assignment (ReplacePostfixExpressionWithAssignmentCodeRefactoringProvider)</li>
                            <li>Replace property that uses a backing field with auto-property (ReplacePropertyWithBackingFieldWithAutoPropertyCodeRefactoringProvider)</li>
                            <li>Convert 'as' to cast. (ReplaceSafeCastWithDirectCastCodeRefactoringProvider)</li>
                            <li>Replaces 'var' with explicit type specification (ReplaceVarWithExplicitTypeCodeRefactoringProvider)</li>
                            <li>Replace assignment with operator assignment (ReplaceWithOperatorAssignmentCodeRefactoringProvider)</li>
                            <li>Reverse the direction of a for  (ReverseDirectionForForLoopCodeRefactoringProvider)</li>
                            <li>Split declaration list (SplitDeclarationListCodeRefactoringProvider)</li>
                            <li>Split 'if' with '&amp;&amp;' condition in two nested 'if' statements (SplitIfWithAndConditionInTwoCodeRefactoringProvider)</li>
                            <li>Split 'if' with '||' condition in two 'if' statements (SplitIfWithOrConditionInTwoCodeRefactoringProvider)</li>
                            <li>Split local variable declaration and assignment (SplitLocalVariableDeclarationAndAssignmentCodeRefactoringProvider)</li>
                            <li>Split string literal (SplitStringCodeRefactoringProvider)</li>
                            <li>Make abstract member virtual (ToAbstractVirtualNonVirtualConversionCodeRefactoringProvider)</li>
                            <li>Use 'as' and check for null (UseAsAndNullCheckCodeRefactoringProvider)</li>
                            <li>Use string.Format() (UseStringFormatAction)</li>
                            <li>Use System.Environment.NewLine (UseSystemEnvironmentNewLineCodeRefactoringProvider)</li>
                            <li>Use string.Empty (UseSystemStringEmptyCodeRefactoringProvider)</li>
                        </ul>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseCSharpAnalyzers"
                       href="#collapseCSharpAnalyzers">C# Analyzers<span style="float: right;">119</span></a>
                </h4>
                <div id="collapseCSharpAnalyzers" class="panel-collapse collapse">
                    <div class="panel-body">

                        <ul>
                            <li>Suggests using the class declaring a static function when calling it (AccessToStaticMemberViaDerivedTypeAnalyzer)</li>
                            <li>When initializing explicitly typed local variable or array type, array creation expression can be replaced with array initializer. (ArrayCreationCanBeReplacedWithArrayInitializerAnalyzer)</li>
                            <li>Asynchronous methods should return a Task instead of void (AvoidAsyncVoidAnalyzer)</li>
                            <li>Base parameter has 'params' modifier, but missing in overrider (BaseMemberHasParamsAnalyzer)</li>
                            <li>Call to base member with implicit default parameters (BaseMethodCallWithDefaultParameterAnalyzer)</li>
                            <li>Parameter name differs in base declaration (BaseMethodParameterNameMismatchAnalyzer)</li>
                            <li>Bitwise operation on enum which has no [Flags] attribute (BitwiseOperatorOnEnumWithoutFlagsAnalyzer)</li>
                            <li>Finds potentially erroneous calls to Object.Equals (CallToObjectEqualsViaBaseAnalyzer)</li>
                            <li>Possible compare of value type with 'null' (CompareNonConstrainedGenericWithNullAnalyzer)</li>
                            <li>Comparison of floating point numbers with equality operator (CompareOfFloatsByEqualityOperatorAnalyzer)</li>
                            <li>'?:' expression has identical true and false branches (ConditionalTernaryEqualBranchAnalyzer)</li>
                            <li>Expression is always 'true' or always 'false' (ConditionIsAlwaysTrueOrFalseAnalyzer)</li>
                            <li>Condition is always 'true' or always 'false' (ConstantConditionAnalyzer)</li>
                            <li>Finds redundant null coalescing expressions such as expr ?? expr (ConstantNullCoalescingConditionAnalyzer)</li>
                            <li>Convert anonymous method to method group (ConvertClosureToMethodGroupAnalyzer)</li>
                            <li>'?:' expression can be converted to '??' expression (ConvertConditionalTernaryToNullCoalescingAnalyzer)</li>
                            <li>Convert 'if-do-while' to 'while' statement (ConvertIfDoToWhileAnalyzer)</li>
                            <li>'if' statement can be re-written as 'switch' statement (ConvertIfStatementToSwitchStatementAnalyzer)</li>
                            <li>Convert 'if' to '&amp;&amp;' expression (ConvertIfToAndExpressionAnalyzer)</li>
                            <li>Convert 'if' to '||' expression (ConvertIfToOrExpressionAnalyzer)</li>
                            <li>Convert 'Nullable&lt;T&gt;' to the short form 'T?' (ConvertNullableToShortFormAnalyzer)</li>
                            <li>If all fields, properties and methods members are static, the class can be made static. (ConvertToStaticTypeAnalyzer)</li>
                            <li>Delegate subtraction has unpredictable result (DelegateSubtractionAnalyzer)</li>
                            <li>Warns about calls to virtual member functions occuring in the constructor (DoNotCallOverridableMethodsInConstructorAnalyzer)</li>
                            <li>Double negation is redundant (DoubleNegationOperatorAnalyzer)</li>
                            <li>An empty public constructor without paramaters is redundant. (EmptyConstructorAnalyzer)</li>
                            <li>Empty destructor is redundant (EmptyDestructorAnalyzer)</li>
                            <li>Empty control statement body (EmptyEmbeddedStatementAnalyzer)</li>
                            <li>A catch clause that catches System.Exception and has an empty body (EmptyGeneralCatchClauseAnalyzer)</li>
                            <li>Empty namespace declaration is redundant (EmptyNamespaceAnalyzer)</li>
                            <li>Empty statement is redundant (EmptyStatementAnalyzer)</li>
                            <li>The default underlying type of enums is int, so defining it explicitly is redundant. (EnumUnderlyingTypeIsIntAnalyzer)</li>
                            <li>Comparing equal expression for equality is usually useless (EqualExpressionComparisonAnalyzer)</li>
                            <li>Event unsubscription via anonymous delegate is useless (EventUnsubscriptionViaAnonymousDelegateAnalyzer)</li>
                            <li>Convert field to readonly (FieldCanBeMadeReadOnlyAnalyzer)</li>
                            <li>'for' loop control variable is never modified (ForControlVariableIsNeverModifiedAnalyzer)</li>
                            <li>Finds issues with format strings (FormatStringProblemAnalyzer)</li>
                            <li>'true' is redundant as for statement condition (ForStatementConditionIsTrueAnalyzer)</li>
                            <li>Function does not reach its end or a 'return' statement by any of possible execution paths (FunctionNeverReturnsAnalyzer)</li>
                            <li>If an extension method is called as static method convert it to method syntax (InvokeAsExtensionMethodAnalyzer)</li>
                            <li>Local variable has the same name as a member and hides it (LocalVariableHidesMemberAnalyzer)</li>
                            <li>Local variable is never used (LocalVariableNotUsedAnalyzer)</li>
                            <li>Lowercase 'l' is often confused with '1' (LongLiteralEndingLowerLAnalyzer)</li>
                            <li>Member hides static member from outer class (MemberHidesStaticFromOuterClassAnalyzer)</li>
                            <li>Method with optional parameter is hidden by overload (MethodOverloadWithOptionalParameterAnalyzer)</li>
                            <li>Suggest the usage of the nameof operator (NameOfSuggestionAnalyzer)</li>
                            <li>Non public methods are not found by NUnit (NonPublicMethodWithTestAttributeAnalyzer)</li>
                            <li>Shows NotImplementedException throws in the quick task bar (NotImplementedExceptionAnalyzer)</li>
                            <li>Cannot resolve symbol in text argument (NotResolvedInTextAnalyzer)</li>
                            <li>Possible unassigned object created by 'new' (ObjectCreationAsStatementAnalyzer)</li>
                            <li>Operator Is can be used instead of comparing object GetType() and instances of System.Type object (OperatorIsCanBeUsedAnalyzer)</li>
                            <li>C# doesn't support optional 'ref' or 'out' parameters (OptionalParameterRefOutAnalyzer)</li>
                            <li>Parameter has the same name as a member and hides it (ParameterHidesMemberAnalyzer)</li>
                            <li>Parameter is assigned but its value is never used (ParameterOnlyAssignedAnalyzer)</li>
                            <li>Parameter name differs in partial method definition (PartialMethodParameterNameMismatchAnalyzer)</li>
                            <li>Class is declared partial but has only one part (PartialTypeWithSinglePartAnalyzer)</li>
                            <li>Possible mistaken call to 'object.GetType()' (PossibleMistakenCallToGetTypeAnalyzer)</li>
                            <li>Constructor in abstract class should not be public (PublicConstructorInAbstractClassAnalyzer)</li>
                            <li>Redundant explicit property name (RedundantAnonymousTypePropertyNameAnalyzer)</li>
                            <li>Redundant explicit argument name specification (RedundantArgumentNameAnalyzer)</li>
                            <li>Parentheses are redundant if attribute has no arguments (RedundantAttributeParenthesesAnalyzer)</li>
                            <li>This is generated by the compiler and can be safely removed (RedundantBaseConstructorCallAnalyzer)</li>
                            <li>'base.' is redundant and can safely be removed (RedundantBaseQualifierAnalyzer)</li>
                            <li>Redundant case label (RedundantCaseLabelAnalyzer)</li>
                            <li>Check for inequality before assignment is redundant if (x != value) x = value; (RedundantCheckBeforeAssignmentAnalyzer)</li>
                            <li>Redundant comma in array initializer (RedundantCommaInArrayInitializerAnalyzer)</li>
                            <li>Initializing field with default value is redundant (RedundantDefaultFieldInitializerAnalyzer)</li>
                            <li>Explicit delegate creation expression is redundant (RedundantDelegateCreationAnalyzer)</li>
                            <li>Redundant empty 'default' switch branch (RedundantEmptyDefaultSwitchBranchAnalyzer)</li>
                            <li>Redundant empty finally block (RedundantEmptyFinallyBlockAnalyzer)</li>
                            <li>Redundant explicit size in array creation (RedundantExplicitArraySizeAnalyzer)</li>
                            <li>Value types are implicitly convertible to nullables (RedundantExplicitNullableCreationAnalyzer)</li>
                            <li>Redundant 'else' keyword (RedundantIfElseBlockAnalyzer)</li>
                            <li>Removes 'internal' modifiers that are not required (RedundantInternalAnalyzer)</li>
                            <li>When object creation uses object or collection initializer, empty argument list is redundant (RedundantObjectCreationArgumentListAnalyzer)</li>
                            <li>Removes 'private' modifiers that are not required (RedundantPrivateAnalyzer)</li>
                            <li>Redundant 'string.ToCharArray()' call (RedundantStringToCharArrayCallAnalyzer)</li>
                            <li>Redundant conditional expression (RedundantTernaryExpressionAnalyzer)</li>
                            <li>RedundantToStringCallAnalyzer</li>
                            <li>Unsafe modifier in redundant in unsafe context or when no unsafe constructs are used (RedundantUnsafeContextAnalyzer)</li>
                            <li>Remove redundant statement (RemoveRedundantOrStatementAnalyzer)</li>
                            <li>Replace with call to FirstOrDefault&lt;T&gt;() (ReplaceWithFirstOrDefaultAnalyzer)</li>
                            <li>Replace with call to LastOrDefault&lt;T&gt;() (ReplaceWithLastOrDefaultAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt; (ReplaceWithOfTypeAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().Any() (ReplaceWithOfTypeAnyAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().Count() (ReplaceWithOfTypeCountAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().First() (ReplaceWithOfTypeFirstAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().FirstOrDefault() (ReplaceWithOfTypeFirstOrDefaultAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().Last() (ReplaceWithOfTypeLastAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().LastOrDefault() (ReplaceWithOfTypeLastOrDefaultAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().LongCount() (ReplaceWithOfTypeLongCountAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().Single() (ReplaceWithOfTypeSingleAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().SingleOrDefault() (ReplaceWithOfTypeSingleOrDefaultAnalyzer)</li>
                            <li>Replace with call to OfType&lt;T&gt;().Where() (ReplaceWithOfTypeWhereAnalyzer)</li>
                            <li>Replace with simple assignment (ReplaceWithSimpleAssignmentAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by Any() (ReplaceWithSingleCallToAnyAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by Count() (ReplaceWithSingleCallToCountAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by First() (ReplaceWithSingleCallToFirstAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by FirstOrDefault() (ReplaceWithSingleCallToFirstOrDefaultAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by Last() (ReplaceWithSingleCallToLastAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by LastOrDefault() (ReplaceWithSingleCallToLastOrDefaultAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by LongCount() (ReplaceWithSingleCallToLongCountAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by Single() (ReplaceWithSingleCallToSingleAnalyzer)</li>
                            <li>Redundant Where() call with predicate followed by SingleOrDefault() (ReplaceWithSingleCallToSingleOrDefaultAnalyzer)</li>
                            <li>Uses shorter string.IsNullOrEmpty call instead of a longer condition (ReplaceWithStringIsNullOrEmptyAnalyzer)</li>
                            <li>Unallowed usage of Roslyn features in this context. (RoslynUsageAnalyzer)</li>
                            <li>'sealed' modifier is redundant in sealed classes (SealedMemberInSealedClassAnalyzer)</li>
                            <li>Conditional expression can be simplified (SimplifyConditionalTernaryExpressionAnalyzer)</li>
                            <li>Warns about static fields in generic types (StaticFieldOrAutoPropertyInGenericTypeAnalyzer)</li>
                            <li>Warns when a culture-aware 'string.CompareTo' call is used by default (StringCompareToIsCultureSpecificAnalyzer)</li>
                            <li>Warns when a culture-aware 'EndsWith' call is used by default. (StringEndsWithIsCultureSpecificAnalyzer)</li>
                            <li>Warns when a culture-aware 'IndexOf' call is used by default. (StringIndexOfIsCultureSpecificAnalyzer)</li>
                            <li>Warns when a culture-aware 'LastIndexOf' call is used by default. (StringLastIndexOfIsCultureSpecificAnalyzer)</li>
                            <li>Warns when a culture-aware 'StartsWith' call is used by default. (StringStartsWithIsCultureSpecificAnalyzer)</li>
                            <li>Use 'var' keyword when possible (SuggestUseVarKeywordEvidentAnalyzer)</li>
                            <li>[ThreadStatic] doesn't work with instance fields (ThreadStaticAtInstanceFieldAnalyzer)</li>
                            <li>Type parameter is never used (UnusedTypeParameterAnalyzer)</li>
                            <li>Warns about property or indexer setters and event adders or removers that do not use the value parameter (ValueParameterNotUsedAnalyzer)</li>
                            <li>Validate Xml docs (XmlDocAnalyzer)</li>
                        </ul>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseCSharpFixes"
                       href="#collapseCSharpFixes">C# Fixes<span style="float: right;">9</span></a>
                </h4>
                <div id="collapseCSharpFixes" class="panel-collapse collapse">
                    <div class="panel-body">

                        <ul>
                            <li>CS0108UseNewKeywordIfHidingIntendedCodeFixProvider</li>
                            <li>CS0152DuplicateCaseLabelValueCodeFixProvider</li>
                            <li>CS0162UnreachableCodeDetectedCodeFixProvider</li>
                            <li>CS0164LabelHasNotBeenReferencedCodeFixProvider</li>
                            <li>CS0759RedundantPartialMethodCodeFixProvider</li>
                            <li>CS1105ExtensionMethodMustBeDeclaredStaticCodeFixProvider</li>
                            <li>CS1520MethodMustHaveAReturnTypeCodeFixProvider</li>
                            <li>InvalidConversionCodeFixProvider</li>
                            <li>ReturnMustNotBeFollowedByAnyExpressionCodeFixProvider</li>
                        </ul>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseVBRefactorings"
                       href="#collapseVBRefactorings">VB Refactorings<span style="float: right;">19</span></a>
                </h4>
                <div id="collapseVBRefactorings" class="panel-collapse collapse">
                    <div class="panel-body">

                        <ul>
                            <li>Adds another accessor (AddAnotherAccessorCodeRefactoringProvider)</li>
                            <li>Add check for Nothing (AddCheckForNothingCodeRefactoringProvider)</li>
                            <li>Check dictionary key value (CheckDictionaryKeyValueCodeRefactoringProvider)</li>
                            <li>Check if parameter is Nothing (CheckIfParameterIsNothingCodeRefactoringProvider)</li>
                            <li>Compute constant value (ComputeConstantValueCodeRefactoringProvider)</li>
                            <li>Convert dec to hex. (ConvertDecToHexCodeRefactoringProvider)</li>
                            <li>Convert Do...Loop While/Until to Do While/Until...Loop (ConvertDoLoopWhileToDoWhileLoopCodeRefactoringProvider)</li>
                            <li>Convert Do While/Until...Loop to Do...Loop While/Until (ConvertDoWhileLoopToDoLoopWhileCodeRefactoringProvider)</li>
                            <li>Convert hex to dec. (ConvertHexToDecCodeRefactoringProvider)</li>
                            <li>Convert 'If' to 'Select Case' (ConvertIfStatementToSelectCaseStatementCodeRefactoringProvider)</li>
                            <li>Convert 'Select Case' to 'If' (ConvertSelectCaseToIfCodeRefactoringProvider)</li>
                            <li>Convert to custom event (ConvertToCustomEventCodeRefactoringProvider)</li>
                            <li>Copy comments from base (CopyCommentsFromBaseCodeRefactoringProvider)</li>
                            <li>Create changed event for property (CreateChangedEventCodeRefactoringProvider)</li>
                            <li>Create overload without parameter (CreateOverloadWithoutParameterCodeRefactoringProvider)</li>
                            <li>Invert if (InvertIfCodeRefactoringProvider)</li>
                            <li>Invert logical expression (InvertLogicalExpressionCodeRefactoringProvider)</li>
                            <li>Convert cast to 'TryCast'. (ReplaceDirectCastWithSafeCastCodeRefactoringProvider)</li>
                            <li>Convert 'TryCast' to cast. (ReplaceSafeCastWithDirectCastCodeRefactoringProvider)</li>
                        </ul>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseVBAnalyzers"
                       href="#collapseVBAnalyzers">VB Analyzers<span style="float: right;">2</span></a>
                </h4>
                <div id="collapseVBAnalyzers" class="panel-collapse collapse">
                    <div class="panel-body">

                        <ul>
                            <li>Suggest the usage of the NameOf operator (NameOfSuggestionAnalyzer)</li>
                            <li>Non public methods are not found by NUnit (NonPublicMethodWithTestAttributeAnalyzer)</li>
                        </ul>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseVBFixes"
                       href="#collapseVBFixes">VB Fixes<span style="float: right;">0</span></a>
                </h4>
                <div id="collapseVBFixes" class="panel-collapse collapse">
                    <div class="panel-body">


                    </div>
                </div>
            </div>
        </div>
    </div>


</div>

@section scripts {
    <script src="~/js/togglebyhashtag.js"></script>
}