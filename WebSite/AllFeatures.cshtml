@{
    Layout = "~/Shared/_Layout.cshtml";
    Page.Title = "All Features";
}

<div class="jumbotron">

    <div class="container">
        <h1>
            All Features
        </h1>
    </div>

</div>

<div class="container">

    <div class="row">
        <div class="col-lg-12">



            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseCSharpAnalyzers"
                       href="#collapseCSharpAnalyzers">C# Analyzers<span style="float: right;">Number</span></a>

                </h4>

                <div id="collapseCSharpAnalyzers" class="panel-collapse collapse in">
                    <div class="panel-body">
TBD

                    </div>
                </div>
            </div>

        </div>

    </div>
    <div class="row">
        <div class="col-lg-12">

            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseCSharpRefactorings"
                       href="#collapseCSharpRefactorings">C# Refactorings<span style="float: right;">92</span></a>
                </h4>

                <div id="collapseCSharpRefactorings" class="panel-collapse collapse">
                    <div class="panel-body">

                        <ul>
                            <li>Adds another accessor (AddAnotherAccessorCodeRefactoringProvider)</li>
                            <li>Add braces (AddBracesCodeRefactoringProvider)</li>
                            <li>'catch' to 'catch (Exception)' (AddCatchExceptionCodeRefactoringProvider)</li>
                            <li>Add an exception description to the xml documentation (AddExceptionDescriptionCodeRefactoringProvider)</li>
                            <li>Add name for argument (AddNameToArgumentCodeRefactoringProvider)</li>
                            <li>Introduce format item (AddNewFormatItemCodeRefactoringProvider)</li>
                            <li>Add one or more optional parameters to an invocation, using their default values (AddOptionalParameterToInvocationCodeRefactoringProvider)</li>
                            <li>Check array index value (CheckArrayIndexValueCodeRefactoringProvider)</li>
                            <li>Check collection index value (CheckCollectionIndexValueCodeRefactoringProvider)</li>
                            <li>Check dictionary key value (CheckDictionaryKeyValueCodeRefactoringProvider)</li>
                            <li>Check if parameter is null (CheckIfParameterIsNullCodeRefactoringProvider)</li>
                            <li>Check StringBuilder index value (CheckStringBuilderIndexValueCodeRefactoringProvider)</li>
                            <li>Check string index value (CheckStringIndexValueCodeRefactoringProvider)</li>
                            <li>Compute constant value (ComputeConstantValueCodeRefactoringProvider)</li>
                            <li>Convert anonymous method to lambda expression (ConvertAnonymousMethodToLambdaCodeRefactoringProvider)</li>
                            <li>Convert auto-property to computed propertyy (ConvertAutoPropertyToPropertyCodeRefactoringProvider)</li>
                            <li>Replace bitwise flag comparison with call to 'Enum.HasFlag' (ConvertBitwiseFlagComparisonToHasFlagsCodeRefactoringProvider)</li>
                            <li>Convert '??' to '?:' (ConvertCoalescingToConditionalExpressionCodeRefactoringProvider)</li>
                            <li>Convert dec to hex. (ConvertDecToHexCodeRefactoringProvider)</li>
                            <li>Convert do...while to while (ConvertDoWhileToWhileLoopCodeRefactoringProvider)</li>
                            <li>Convert '==' to 'object.Equals()' (ConvertEqualityOperatorToEqualsCodeRefactoringProvider)</li>
                            <li>Convert '==' to 'object.ReferenceEquals()' (ConvertEqualityOperatorToReferenceEqualsCodeRefactoringProvider)</li>
                            <li>Convert 'Equals' call to '==' or '!=' (ConvertEqualsToEqualityOperatorCodeRefactoringProvider)</li>
                            <li>Convert explicit to implict implementation (ConvertExplicitToImplicitImplementationCodeRefactoringProvider)</li>
                            <li>Convert expression body member to statement body (ConvertExpressionBodyToStatementBodyCodeRefactoringProvider)</li>
                            <li>Convert 'foreach' loop to 'for' (ConvertForeachToForCodeRefactoringProvider)</li>
                            <li>Convert 'for' loop to 'while' (ConvertForToWhileCodeRefactoringProvider)</li>
                            <li>Replace 'Enum.HasFlag' call with bitwise flag comparison (ConvertHasFlagsToBitwiseFlagComparisonCodeRefactoringProvider)</li>
                            <li>Convert hex to dec. (ConvertHexToDecCodeRefactoringProvider)</li>
                            <li>Convert 'if' to '?:' (ConvertIfStatementToConditionalTernaryExpressionCodeRefactoringProvider)</li>
                            <li>Convert 'if' to '??' expression (ConvertIfStatementToNullCoalescingExpressionAction)</li>
                            <li>Convert 'if' to 'return' (ConvertIfStatementToReturnStatementAction)</li>
                            <li>Convert 'if' to 'switch' (ConvertIfStatementToSwitchStatementCodeRefactoringProvider)</li>
                            <li>Convert implict to explicit implementation (ConvertImplicitToExplicitImplementationCodeRefactoringProvider)</li>
                            <li>Convert string interpolation to 'string.Format' (ConvertInterpolatedStringToStringFormatCodeRefactoringProvider)</li>
                            <li>Converts expression of lambda body to statement (ConvertLambdaBodyExpressionToStatementCodeRefactoringProvider)</li>
                            <li>Converts statement of lambda body to expression (ConvertLambdaStatementToExpressionCodeRefactoringProvider)</li>
                            <li>Convert lambda to anonymous method (ConvertLambdaToAnonymousMethodCodeRefactoringProvider)</li>
                            <li>Convert method group to anoymous method (ConvertMethodGroupToAnonymousMethodCodeRefactoringProvider)</li>
                            <li>Convert method group to lambda expression (ConvertMethodGroupToLambdaCodeRefactoringProvider)</li>
                            <li>Convert '*'/'/' to '&lt;&lt;'/'&gt;&gt;' (ConvertMultiplyToShiftCodeRefactoringProvider)</li>
                            <li>Convert 'ReferenceEquals' call to '==' or '!=' (ConvertReferenceEqualsToEqualityOperatorCodeRefactoringProvider)</li>
                            <li>Convert '&lt;&lt;'/'&gt;&gt;' to '*'/'/' (ConvertShiftToMultiplyCodeRefactoringProvider)</li>
                            <li>Convert 'string.Format' to string interpolation (ConvertStringFormatToInterpolatedStringCodeRefactoringProvider)</li>
                            <li>Convert 'switch' to 'if' (ConvertSwitchToIfCodeRefactoringProvider)</li>
                            <li>Convert 'return' to 'if' (ConvertTernaryExpressionToIfStatementCodeRefactoringProvider)</li>
                            <li>Convert while loop to do...while (ConvertWhileToDoWhileLoopCodeRefactoringProvider)</li>
                            <li>Copy comments from base (CopyCommentsFromBaseCodeRefactoringProvider)</li>
                            <li>Create changed event for property (CreateChangedEventCodeRefactoringProvider)</li>
                            <li>Create custom event implementation (CreateCustomEventImplementationAction)</li>
                            <li>Create event invocator (CreateEventInvocatorCodeRefactoringProvider)</li>
                            <li>Extract field (ExtractWhileConditionToInternalIfStatementCodeRefactoringProvider)</li>
                            <li>Swap 'Equals' target and argument (FlipEqualsTargetAndArgumentCodeRefactoringProvider)</li>
                            <li>Flip an operator operands (FlipOperatorArgumentsCodeRefactoringProvider)</li>
                            <li>Flip an relational operator operands (FlipRelationalOperatorArgumentsCodeRefactoringProvider)</li>
                            <li>Generate switch labels (GenerateSwitchLabelsCodeRefactoringProvider)</li>
                            <li>Import static class with using directive in file (ImportStaticClassWithUsingCodeRefactoringProvider)</li>
                            <li>Initialize auto property from constructor parameter (InitializeAutoPropertyFromConstructorParameterCodeRefactoringProvider)</li>
                            <li>Initialize field from constructor parameter (InitializeFieldFromConstructorParameterCodeRefactoringProvider)</li>
                            <li>Insert anonymous method signature (InsertAnonymousMethodSignatureCodeRefactoringProvider)</li>
                            <li>Invert conditional operator (InvertConditionalOperatorCodeRefactoringProvider)</li>
                            <li>Invert if (InvertIfCodeRefactoringProvider)</li>
                            <li>Invert logical expression (InvertLogicalExpressionCodeRefactoringProvider)</li>
                            <li>Invoke as static method (InvokeAsStaticMethodCodeRefactoringProvider)</li>
                            <li>Join local variable declaration and assignment (JoinLocalVariableDeclarationAndAssignmentCodeRefactoringProvider)</li>
                            <li>Join string literal (JoinStringCodeRefactoringProvider)</li>
                            <li>Negate 'is' expression (NegateIsExpressionCodeRefactoringProvider)</li>
                            <li>Negate a relational expression (NegateLogicalExpressionCodeRefactoringProvider)</li>
                            <li>Remove braces (RemoveBracesCodeRefactoringProvider)</li>
                            <li>'catch (Exception)' to 'catch' (RemoveCatchExceptionCodeRefactoringProvider)</li>
                            <li>Remove #region/#endregion directives (RemoveRegionEndRegionDirectivesCodeRefactoringProvider)</li>
                            <li>Replace assignment with postfix expression (ReplaceAssignmentWithPostfixExpressionCodeRefactoringProvider)</li>
                            <li>Replace auto-property with property that uses a backing field (ReplaceAutoPropertyWithPropertyAndBackingFieldCodeRefactoringProvider)</li>
                            <li>Convert cast to 'as'. (ReplaceDirectCastWithSafeCastCodeRefactoringProvider)</li>
                            <li>Replace type with 'var' (ReplaceExplicitTypeWithVarCodeRefactoringProvider)</li>
                            <li>Replace operator assignment with assignment (ReplaceOperatorAssignmentWithAssignmentCodeRefactoringProvider)</li>
                            <li>Replace postfix expression with assignment (ReplacePostfixExpressionWithAssignmentCodeRefactoringProvider)</li>
                            <li>Replace property that uses a backing field with auto-property (ReplacePropertyWithBackingFieldWithAutoPropertyCodeRefactoringProvider)</li>
                            <li>Convert 'as' to cast. (ReplaceSafeCastWithDirectCastCodeRefactoringProvider)</li>
                            <li>Replaces 'var' with explicit type specification (ReplaceVarWithExplicitTypeCodeRefactoringProvider)</li>
                            <li>Replace assignment with operator assignment (ReplaceWithOperatorAssignmentCodeRefactoringProvider)</li>
                            <li>Reverse the direction of a for  (ReverseDirectionForForLoopCodeRefactoringProvider)</li>
                            <li>Sort usings (SortUsingsAction)</li>
                            <li>Split declaration list (SplitDeclarationListCodeRefactoringProvider)</li>
                            <li>Split 'if' with '&amp;&amp;' condition in two nested 'if' statements (SplitIfWithAndConditionInTwoCodeRefactoringProvider)</li>
                            <li>Split 'if' with '||' condition in two 'if' statements (SplitIfWithOrConditionInTwoCodeRefactoringProvider)</li>
                            <li>Split local variable declaration and assignment (SplitLocalVariableDeclarationAndAssignmentCodeRefactoringProvider)</li>
                            <li>Split string literal (SplitStringCodeRefactoringProvider)</li>
                            <li>Make abstract member virtual (ToAbstractVirtualNonVirtualConversionCodeRefactoringProvider)</li>
                            <li>Use 'as' and check for null (UseAsAndNullCheckCodeRefactoringProvider)</li>
                            <li>Use System.Environment.NewLine (UseSystemEnvironmentNewLineCodeRefactoringProvider)</li>
                            <li>Use string.Empty (UseSystemStringEmptyCodeRefactoringProvider)</li>
                        </ul>

                    </div>
                </div>
            </div>



        </div>

    </div>



    <div class="row">
        <div class="col-lg-12">



            <div class="panel panel-default">
                <h4 class="panel-heading" style="margin: 0">
                    <a data-toggle="collapse" data-target="#collapseFixes"
                       href="#collapseFixes">Fixes<span style="float: right;">Number</span></a>

                </h4>

                <div id="collapseFixes" class="panel-collapse collapse">
                    <div class="panel-body">
                        TBD
                    </div>
                </div>
            </div>

        </div>

    </div>


</div>